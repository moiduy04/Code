template<int op(const char&), int alpha_sz>
struct trie_node{
	int p, link = -1, suff_link = -1; 
	char pch;
	int go[alpha_sz], next[alpha_sz];
	bool leaf = false;
	vi idx;
	trie_node(const int& p = -1, const char& ch = ' ') : p(p), pch(ch)
	{
		fill(begin(go), end(go),-1);
		fill(begin(next), end(next),-1);
	}
};

template<int op(const char&), int alpha_sz>
struct Trie{
	vector< trie_node<op,alpha_sz> > trie; int n = 0;
	void add_string(const string& s, int id)
	{
		int v = 0;
		for(char ch : s)
		{
			int c = op(ch);
			if (trie[v].next[c] == -1)
			{
				trie[v].next[c] = trie.size();
				trie.eb(v,ch);
			}
			v = trie[v].next[c];
		}
		trie[v].leaf = true;
		trie[v].idx.pb(id);
	}
	Trie(){trie = vector<trie_node<op,alpha_sz> >(1);}
	Trie(vector<string>& ss){trie = vector<trie_node<op,alpha_sz> >(1); for(string& i: ss) add_string(i, n++);}
	Trie& operator=(const Trie& other) const {trie = other.trie, n = other.n; return *this;} 
	
	int go(const int& v, const char& ch);
	int get_link(const int& v)
	{
		if (trie[v].link == -1)
		{
			if (v == 0 || trie[v].p == 0)
				trie[v].link = 0;
			else
				trie[v].link = go(get_link(trie[v].p), trie[v].pch);
		}
		return trie[v].link;
	}
	
	int get_suff_link(const int& v)
	{
		if (trie[v].suff_link == -1)
		{
			if (trie[get_link(v)].leaf || get_link(v) == 0)
				trie[v].suff_link = get_link(v);
			else
				trie[v].suff_link = get_suff_link(get_link(v));
		}
		return trie[v].suff_link;
	}
};

template<int op(const char&), int alpha_sz>
int Trie<op,alpha_sz>::go(const int& v, const char& ch)
{
	int c = op(ch);
	if (trie[v].go[c] == -1)
	{
		if (trie[v].next[c] ^ -1)
			trie[v].go[c] = trie[v].next[c];
		else
			trie[v].go[c] = v ? go(get_link(v), ch) : 0;
	}
	return trie[v].go[c];
}

template<int op(const char&), int alpha_sz = 100>
struct Aho_Corasick{
	Trie<op,alpha_sz> t;
	Aho_Corasick(Trie<op,alpha_sz> t): t(t) {}
	Aho_Corasick(vector<string>& ss) : t(Trie<op,alpha_sz>(ss)) {}
	
	vector<pair<int,int> > get(string text)
	//return a vector of pairs:
//		1st element is index at end of collision,
//	 	2nd is index of colliding string
	{
		vector<pair<int,int> > res;
		int v = 0;
		for(int i = 0; i < text.length(); ++i)
		{
			v = t.go(v, text[i]);
			int _v = v;
			while(_v)
			{
				if (t.trie[_v].leaf) for(int id: t.trie[_v].idx) res.pb({i,id});
				_v = t.get_suff_link(_v);
			}
		}
		return res;
	}
};
int op(const char& ch){// function that turns char into int.
	return int(ch - ' ');
}
