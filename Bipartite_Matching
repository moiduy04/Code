class bipartite_graph {
	vector<int> L, R, Viz;
	
public:
	vector<vector<int>> adjlist;
	bipartite_graph(const int& n, const int& m) : L(n, -1), R(m, -1), Viz(n), adjlist(n) {}

	void add(const int& a, const int& b) {adjlist[a].push_back(b);}

	bool Match(const int node) {
		if (Viz[node]) return false;
		Viz[node] = true;
		
		for (auto u : adjlist[node]) {
			if (R[u] == -1) {
			L[node] = u, R[u] = node;
			return true;
			}
		}

		for (auto u : adjlist[node]) {
			if (Match(R[u])) {
				L[node] = u, R[u] = node;
				return true;
			}
		}

		return false;
	}
  
	int max_match() {
		int ok = 1;
		while (ok--) {
			fill(Viz.begin(), Viz.end(), 0);
			for (int i = 0; i < L.size(); ++i)
				if (L[i] == -1) ok |= Match(i);
		}
    
		int res = 0;
		for (int& i : L)
			res += (i != -1);
		return res;
	}
};
